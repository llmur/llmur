
#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChatCompletionResponse {
    /// A list of chat completion choices. Can be more than one if n is greater than 1.
    pub choices: Vec<ChatCompletionResponseChoice>,

    /// The Unix timestamp (in seconds) of when the chat completion was created.
    pub created: i64,

    /// A unique identifier for the chat completion.
    pub id: String,

    /// The model used for the chat completion.
    pub model: String,

    /// The object type, which is always chat.completion.
    pub object: String,

    /// This fingerprint represents the backend configuration that the model runs with. Can be used in conjunction with the seed request parameter to understand when backend changes have been made that might impact determinism.
    pub system_fingerprint: String,

    /// Usage statistics for the completion request.
    pub usage: ChatCompletionResponseUsage,
}


#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChatCompletionResponseUsage {
	/// Number of tokens in the generated completion.
	completion_tokens: u64,
	/// Number of tokens in the prompt.
	prompt_tokens: u64,
	/// Total number of tokens used in the request (prompt + completion).
	total_tokens: u64,
}


#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChatCompletionResponseChoice {
	/// The reason the model stopped generating tokens. This will be stop if the model hit a
	/// natural stop point or a provided stop sequence, length if the maximum number of tokens
	/// specified in the request was reached, content_filter if content was omitted due to a flag
	/// from our content filters, tool_calls if the model called a tool, or function_call
	/// (deprecated) if the model called a function.
	pub finish_reason: String,

	/// The index of the choice in the list of choices.
	pub index: u64,

	// A chat completion message generated by the model.
	pub message: ChatCompletionResponseChoiceMessage,

	/// Log probability information for the choice.
	#[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
	pub content_filter_results: Option<ChatCompletionResponseContentFilterResults>,
}


#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChatCompletionResponseContentFilterResults {
    // TODO
}


#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChatCompletionResponseChoiceMessage {
	/// The contents of the message
	#[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
	pub content: Option<String>,
	/// The role of the author of the message
	pub role: String,
	/// The tool calls generated by the model, such as function calls.
	pub tool_calls: Option<Vec<ChatCompletionResponseChoiceToolCall>>,

    pub context: Option<Vec<AzureMessageContext>>
}

#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AzureMessageContext {
	#[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
	pub intent: Option<String>,
	#[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
	pub citations: Option<Vec<AzureContextCitation>>,
}

#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AzureContextCitation {
	pub content: String,
	#[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
	pub title: Option<String>,
	#[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
	pub url: Option<String>,
	#[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
	pub filepath: Option<String>,
	#[cfg_attr(feature = "serde", serde(skip_serializing_if = "Option::is_none"))]
	pub chunk_id: Option<String>,
}

#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize), serde(tag = "type"))]
pub enum ChatCompletionResponseChoiceToolCall {
	#[cfg_attr(feature = "serde", serde(alias = "function"))]
	FunctionTool { id: String, function: ChatCompletionResponseChoiceFunctionToolCall },
}

#[derive(Debug, PartialEq, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChatCompletionResponseChoiceFunctionToolCall {
	name: String,
	arguments: String,
}